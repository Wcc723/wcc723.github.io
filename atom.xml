<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>卡斯伯 Blog - 前端，沒有極限</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wcc723.github.io/"/>
  <updated>2020-10-08T03:35:50.151Z</updated>
  <id>https://wcc723.github.io/</id>
  
  <author>
    <name>Wang Casper</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手把手自訂你的 Bootstrap 樣式</title>
    <link href="https://wcc723.github.io/development/2020/10/08/custom-bootstrap-style/"/>
    <id>https://wcc723.github.io/development/2020/10/08/custom-bootstrap-style/</id>
    <published>2020-10-07T16:00:00.000Z</published>
    <updated>2020-10-08T03:35:50.151Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Bootstrap
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="css" scheme="https://wcc723.github.io/tags/css/"/>
    
      <category term="bootstrap" scheme="https://wcc723.github.io/tags/bootstrap/"/>
    
      <category term="scss" scheme="https://wcc723.github.io/tags/scss/"/>
    
  </entry>
  
  <entry>
    <title>JS - for 迴圈與 forEach 有什麼不同</title>
    <link href="https://wcc723.github.io/development/2020/10/05/js-for-loop-vs-for-each/"/>
    <id>https://wcc723.github.io/development/2020/10/05/js-for-loop-vs-for-each/</id>
    <published>2020-10-04T16:00:00.000Z</published>
    <updated>2020-10-05T06:23:35.428Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;過去，當有一個陣列的內容需要依序取值時，都會使用 &lt;code&gt;for...&lt;/code&gt; 迴圈(for loop)的形式將值一一取出，原始碼的結構如下：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JS 常見陣列方法 [push(), unshift(), pop(), shift(), splice(), reverse(), concat(), include(), indexOf(), join()]</title>
    <link href="https://wcc723.github.io/development/2020/10/04/js-array-methods/"/>
    <id>https://wcc723.github.io/development/2020/10/04/js-array-methods/</id>
    <published>2020-10-03T16:00:00.000Z</published>
    <updated>2020-10-04T11:54:31.274Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;本篇陣列方法是延伸過去寫的 &lt;a href=&quot;https://wcc723.github.io/javascript/2017/06/29/es6-native-array/&quot;&gt;JavaScript
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>AJAX 完整解說系列：輕鬆搞懂 HTTP 狀態碼（HTTP Status Code）</title>
    <link href="https://wcc723.github.io/development/2020/10/03/about-ajax-4/"/>
    <id>https://wcc723.github.io/development/2020/10/03/about-ajax-4/</id>
    <published>2020-10-02T16:00:00.000Z</published>
    <updated>2020-10-04T01:46:44.479Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;AJAX
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>AJAX 完整解說系列：使用 Chrome Devtools 檢視請求及回應</title>
    <link href="https://wcc723.github.io/development/2020/10/02/about-ajax-3/"/>
    <id>https://wcc723.github.io/development/2020/10/02/about-ajax-3/</id>
    <published>2020-10-01T16:00:00.000Z</published>
    <updated>2020-10-02T01:52:23.747Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;從上一篇內容我們介紹到 AJAX 都是由瀏覽器發出請求，伺服器則會依據請求的內容進行回應。所以在這之中的 “請求”、“回應” 都會夾帶著不同資源，供瀏覽器及伺服器進行辨識及運用，所以此篇就針對瀏覽器與伺服器溝通的內容進行說明，帶大家更深入的認識
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>AJAX 完整解說系列：新增、更新、刪除（POST/PATCH/DELETE）</title>
    <link href="https://wcc723.github.io/development/2020/10/01/about-ajax-2/"/>
    <id>https://wcc723.github.io/development/2020/10/01/about-ajax-2/</id>
    <published>2020-09-30T16:00:00.000Z</published>
    <updated>2020-10-01T02:08:30.783Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;AJAX 除了 GET 以外，其它幾個常見的請求方法通常都會對資料庫進行操作，尤其是 POST、PUT、PATCH 在發出請求的同時還會有附加資源傳送至伺服器。&lt;/p&gt;
&lt;p&gt;&lt;img
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>AJAX 完整解說系列：基礎觀念</title>
    <link href="https://wcc723.github.io/development/2020/09/30/about-ajax/"/>
    <id>https://wcc723.github.io/development/2020/09/30/about-ajax/</id>
    <published>2020-09-29T16:00:00.000Z</published>
    <updated>2020-09-30T08:54:47.252Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;AJAX 全名是「Asynchronous JavaScript and XML」，在網頁上的功能主要是用於網頁前端與後端伺服器溝通的技術，也如同名稱一樣是透過 JavaScript
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>箭頭函式常見陷阱題</title>
    <link href="https://wcc723.github.io/development/2020/09/29/arrow-homework/"/>
    <id>https://wcc723.github.io/development/2020/09/29/arrow-homework/</id>
    <published>2020-09-28T16:00:00.000Z</published>
    <updated>2020-09-29T02:44:01.266Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;JavaScript ES6 以後加入了 ”箭頭函式“，就外觀看來它就像是一個縮寫，也因此許多新手會認為它是屬於傳統函式的縮寫形式；但其實不然，箭頭函式與傳統函式大不同，本篇僅列出最常見的 &lt;code&gt;this&lt;/code&gt;
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>透過練習題，摸熟 This 的運作</title>
    <link href="https://wcc723.github.io/development/2020/09/28/this-homework/"/>
    <id>https://wcc723.github.io/development/2020/09/28/this-homework/</id>
    <published>2020-09-27T16:00:00.000Z</published>
    <updated>2020-09-28T02:52:36.812Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;JavaScript 的 this 會隨著調用的方式不同影響其指向的不同（ES6 的箭頭函式定義也會影響指向），網路上已經提供相當多的資源介紹 &lt;code&gt;this&lt;/code&gt;
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>學好 this 前，先搞清楚 this 做什麼</title>
    <link href="https://wcc723.github.io/development/2020/09/27/why-this/"/>
    <id>https://wcc723.github.io/development/2020/09/27/why-this/</id>
    <published>2020-09-26T16:00:00.000Z</published>
    <updated>2020-09-27T01:41:06.539Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;過去到現在寫了很多 &lt;code&gt;this&lt;/code&gt; 相關的文章，如果沒有實際運用過 &lt;code&gt;this&lt;/code&gt; 的開發者可能會有疑惑「this 是不是只有在面試考題用到？」、「this 在實戰中會用到嗎？」、「為什麼要學 this？」。&lt;/p&gt;
&lt;p&gt;其實
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>閉包，原來這就是閉包啊！</title>
    <link href="https://wcc723.github.io/development/2020/09/26/js-closure/"/>
    <id>https://wcc723.github.io/development/2020/09/26/js-closure/</id>
    <published>2020-09-25T16:00:00.000Z</published>
    <updated>2020-09-26T01:28:59.055Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;閉包，是一個 JavaScript 很常聽到的觀念，雖然會在不知不覺應用到閉包的基本概念，進階的用法在實戰中不一定很常用到，但這卻是面試中非常常見的問題，主要原因是它牽扯到許多的觀念，如詞法作用域、記憶體等觀念。&lt;/p&gt;
&lt;h2 id=&quot;原來這就是閉包：詞法作用域&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Chrome Console 中的 undefined 到底是哪來的？</title>
    <link href="https://wcc723.github.io/development/2020/09/25/chrome-console/"/>
    <id>https://wcc723.github.io/development/2020/09/25/chrome-console/</id>
    <published>2020-09-24T16:00:00.000Z</published>
    <updated>2020-09-25T03:02:26.411Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;教學的過程中，有許多學員會盡可能的搞懂程式碼運行過程中的各種結果，其中一個比較特別的案例就是想搞懂為什麼 Chrome Console 下方的 &lt;code&gt;&amp;lt;·&lt;/code&gt; 會回傳 undefined。&lt;/p&gt;
&lt;p&gt;範例程式碼：&lt;br&gt;&lt;figure
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 一級函式 （First Class Functions）</title>
    <link href="https://wcc723.github.io/development/2020/09/24/first-class-function/"/>
    <id>https://wcc723.github.io/development/2020/09/24/first-class-function/</id>
    <published>2020-09-23T16:00:00.000Z</published>
    <updated>2020-09-24T01:49:14.699Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;本篇重點是要介紹參數與函式的關係（尤其是常令人搞混的 callback function），但這個觀念又會扯到另一個常見的專有名詞（一級函式），因此在本篇就統一介紹。&lt;/p&gt;
&lt;h2 id=&quot;一級函式&quot;&gt;&lt;a href=&quot;#一級函式&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JS 記憶體釋放機制及驗證</title>
    <link href="https://wcc723.github.io/development/2020/09/23/js-object/"/>
    <id>https://wcc723.github.io/development/2020/09/23/js-object/</id>
    <published>2020-09-22T16:00:00.000Z</published>
    <updated>2020-09-23T06:38:23.104Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h2&gt;&lt;p&gt;JavaScript
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>讓我們一起到達終點！超過 60% 完課率的直播課程 - JavaScript 作品實戰直播班</title>
    <link href="https://wcc723.github.io/development/2020/09/22/javascript-training-1st/"/>
    <id>https://wcc723.github.io/development/2020/09/22/javascript-training-1st/</id>
    <published>2020-09-21T16:00:00.000Z</published>
    <updated>2020-09-22T06:29:48.979Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;2020 年 9 月 20 日是 「JavaScript
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
      <category term="courses" scheme="https://wcc723.github.io/tags/courses/"/>
    
  </entry>
  
  <entry>
    <title>呼叫函式時，到底有多少個參數 / 變數可供使用？</title>
    <link href="https://wcc723.github.io/development/2020/09/22/js-function/"/>
    <id>https://wcc723.github.io/development/2020/09/22/js-function/</id>
    <published>2020-09-21T16:00:00.000Z</published>
    <updated>2020-09-22T06:01:47.238Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;建立一個函式並呼叫時我們可以傳入一些參數，或者在這個參數中引用全域的變數，不過一個被呼叫的函式中究竟有多少可取用的變數或參數呢？&lt;/p&gt;
&lt;h2 id=&quot;函式中的可用變數&quot;&gt;&lt;a href=&quot;#函式中的可用變數&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JS 物件名詞解釋及常見觀念問題</title>
    <link href="https://wcc723.github.io/development/2020/09/21/js-object/"/>
    <id>https://wcc723.github.io/development/2020/09/21/js-object/</id>
    <published>2020-09-20T16:00:00.000Z</published>
    <updated>2020-09-21T06:44:45.500Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;接下來來到 JavaScript 另一個坑「物件」。&lt;/p&gt;
&lt;h2 id=&quot;物件的定義方法差在哪？&quot;&gt;&lt;a href=&quot;#物件的定義方法差在哪？&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JS 加不加分號差在哪？</title>
    <link href="https://wcc723.github.io/development/2020/09/20/js-semi/"/>
    <id>https://wcc723.github.io/development/2020/09/20/js-semi/</id>
    <published>2020-09-19T16:00:00.000Z</published>
    <updated>2020-09-20T01:52:16.269Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;這個議題許多論壇、文件都有討論，在 ESlint 的規範中也可從加不加分號區分為兩大派系，至於加不加分號關鍵點則需要了解分號對於 JavaScript 的影響，開始之前可以先看看以下題目。&lt;/p&gt;
&lt;p&gt;下方程式碼的運行預期為：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;宣告
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>開發總是沒問題，上線老是各種錯</title>
    <link href="https://wcc723.github.io/development/2020/09/19/js-expression-3/"/>
    <id>https://wcc723.github.io/development/2020/09/19/js-expression-3/</id>
    <published>2020-09-18T16:00:00.000Z</published>
    <updated>2020-09-19T02:09:28.177Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;不果是新手或老手都可能遇過這樣的狀況，程式碼在測試時運作上看起來都很正常，雖然有一些些地方還不是很熟悉，不過&lt;strong&gt;打從心裡&lt;/strong&gt;認定它是正確的，但麻煩卻上線後才發現出錯，仔細檢查也看不出任何問題，殊不知是表達式的觀念錯誤。&lt;/p&gt;
&lt;p&gt;程式碼的問題千
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 利用表達式優化你的程式碼</title>
    <link href="https://wcc723.github.io/development/2020/09/18/js-expression-2/"/>
    <id>https://wcc723.github.io/development/2020/09/18/js-expression-2/</id>
    <published>2020-09-17T16:00:00.000Z</published>
    <updated>2020-09-18T02:20:45.875Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;上一節介紹了表達式的基本概念「回傳結果」，那麼接下來你一定會想了解有哪些地方可以用到表達式，本篇就列出 JS 語法與常見框架的表達式運用，熟悉以後將會大幅增加 JS 語法的變化性。&lt;/p&gt;
&lt;h2 id=&quot;運算子&quot;&gt;&lt;a href=&quot;#運算子&quot;
        
      
    
    </summary>
    
      <category term="development" scheme="https://wcc723.github.io/categories/development/"/>
    
    
      <category term="javascript" scheme="https://wcc723.github.io/tags/javascript/"/>
    
      <category term="js" scheme="https://wcc723.github.io/tags/js/"/>
    
  </entry>
  
</feed>
